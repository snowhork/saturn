/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * Query API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  AuthOauthNameGoogleDriveAuthGetParams,
  CallbackOauthNameGoogleDriveCallbackGetParams,
  HTTPValidationError,
  HealthHealthGet200,
  Item,
  ListItemsItemsGetParams,
  OAuthToken,
  RootDirRootGetParams,
  Storage,
  TokenOauthNameGoogleDriveTokenGetParams,
  TransferRequest,
} from ".././schema";

/**
 * „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
 * @summary Health
 */
export const healthHealthGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HealthHealthGet200>> => {
  return axios.get(`/health`, options);
};

export const getHealthHealthGetQueryKey = () => {
  return [`/health`] as const;
};

export const getHealthHealthGetQueryOptions = <
  TData = Awaited<ReturnType<typeof healthHealthGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthHealthGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthHealthGet>>> = ({
    signal,
  }) => healthHealthGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthHealthGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type HealthHealthGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthHealthGet>>
>;
export type HealthHealthGetQueryError = AxiosError<unknown>;

export function useHealthHealthGet<
  TData = Awaited<ReturnType<typeof healthHealthGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof healthHealthGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHealthHealthGet<
  TData = Awaited<ReturnType<typeof healthHealthGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof healthHealthGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHealthHealthGet<
  TData = Awaited<ReturnType<typeof healthHealthGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Health
 */

export function useHealthHealthGet<
  TData = Awaited<ReturnType<typeof healthHealthGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthHealthGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getHealthHealthGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary  List
 */
export const listStoragesGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Storage[]>> => {
  return axios.get(`/storages`, options);
};

export const getListStoragesGetQueryKey = () => {
  return [`/storages`] as const;
};

export const getListStoragesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listStoragesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listStoragesGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListStoragesGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listStoragesGet>>> = ({
    signal,
  }) => listStoragesGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listStoragesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListStoragesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listStoragesGet>>
>;
export type ListStoragesGetQueryError = AxiosError<unknown>;

export function useListStoragesGet<
  TData = Awaited<ReturnType<typeof listStoragesGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listStoragesGet>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listStoragesGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListStoragesGet<
  TData = Awaited<ReturnType<typeof listStoragesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listStoragesGet>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listStoragesGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListStoragesGet<
  TData = Awaited<ReturnType<typeof listStoragesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listStoragesGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary  List
 */

export function useListStoragesGet<
  TData = Awaited<ReturnType<typeof listStoragesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listStoragesGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListStoragesGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary  Root Dir
 */
export const rootDirRootGet = (
  params: RootDirRootGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Item>> => {
  return axios.get(`/root`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getRootDirRootGetQueryKey = (params: RootDirRootGetParams) => {
  return [`/root`, ...(params ? [params] : [])] as const;
};

export const getRootDirRootGetQueryOptions = <
  TData = Awaited<ReturnType<typeof rootDirRootGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: RootDirRootGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rootDirRootGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRootDirRootGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rootDirRootGet>>> = ({
    signal,
  }) => rootDirRootGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rootDirRootGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type RootDirRootGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootDirRootGet>>
>;
export type RootDirRootGetQueryError = AxiosError<HTTPValidationError>;

export function useRootDirRootGet<
  TData = Awaited<ReturnType<typeof rootDirRootGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: RootDirRootGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rootDirRootGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootDirRootGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useRootDirRootGet<
  TData = Awaited<ReturnType<typeof rootDirRootGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: RootDirRootGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rootDirRootGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rootDirRootGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useRootDirRootGet<
  TData = Awaited<ReturnType<typeof rootDirRootGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: RootDirRootGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rootDirRootGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary  Root Dir
 */

export function useRootDirRootGet<
  TData = Awaited<ReturnType<typeof rootDirRootGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: RootDirRootGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rootDirRootGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getRootDirRootGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary  List Items
 */
export const listItemsItemsGet = (
  params: ListItemsItemsGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Item[]>> => {
  return axios.get(`/items`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getListItemsItemsGetQueryKey = (
  params: ListItemsItemsGetParams,
) => {
  return [`/items`, ...(params ? [params] : [])] as const;
};

export const getListItemsItemsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listItemsItemsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: ListItemsItemsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listItemsItemsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListItemsItemsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listItemsItemsGet>>
  > = ({ signal }) => listItemsItemsGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listItemsItemsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListItemsItemsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listItemsItemsGet>>
>;
export type ListItemsItemsGetQueryError = AxiosError<HTTPValidationError>;

export function useListItemsItemsGet<
  TData = Awaited<ReturnType<typeof listItemsItemsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: ListItemsItemsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listItemsItemsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listItemsItemsGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListItemsItemsGet<
  TData = Awaited<ReturnType<typeof listItemsItemsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: ListItemsItemsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listItemsItemsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listItemsItemsGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListItemsItemsGet<
  TData = Awaited<ReturnType<typeof listItemsItemsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: ListItemsItemsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listItemsItemsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary  List Items
 */

export function useListItemsItemsGet<
  TData = Awaited<ReturnType<typeof listItemsItemsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: ListItemsItemsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listItemsItemsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListItemsItemsGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary  Transfer
 */
export const transferTransferPost = (
  transferRequest: TransferRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.post(`/transfer`, transferRequest, options);
};

export const getTransferTransferPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transferTransferPost>>,
    TError,
    { data: TransferRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof transferTransferPost>>,
  TError,
  { data: TransferRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transferTransferPost>>,
    { data: TransferRequest }
  > = (props) => {
    const { data } = props ?? {};

    return transferTransferPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TransferTransferPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof transferTransferPost>>
>;
export type TransferTransferPostMutationBody = TransferRequest;
export type TransferTransferPostMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary  Transfer
 */
export const useTransferTransferPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transferTransferPost>>,
    TError,
    { data: TransferRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof transferTransferPost>>,
  TError,
  { data: TransferRequest },
  TContext
> => {
  const mutationOptions = getTransferTransferPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Auth
 */
export const authOauthNameGoogleDriveAuthGet = (
  name: string,
  params: AuthOauthNameGoogleDriveAuthGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.get(`/oauth/${name}/google_drive/auth`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getAuthOauthNameGoogleDriveAuthGetQueryKey = (
  name: string,
  params: AuthOauthNameGoogleDriveAuthGetParams,
) => {
  return [
    `/oauth/${name}/google_drive/auth`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAuthOauthNameGoogleDriveAuthGetQueryOptions = <
  TData = Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: AuthOauthNameGoogleDriveAuthGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAuthOauthNameGoogleDriveAuthGetQueryKey(name, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>
  > = ({ signal }) =>
    authOauthNameGoogleDriveAuthGet(name, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthOauthNameGoogleDriveAuthGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>
>;
export type AuthOauthNameGoogleDriveAuthGetQueryError =
  AxiosError<HTTPValidationError>;

export function useAuthOauthNameGoogleDriveAuthGet<
  TData = Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: AuthOauthNameGoogleDriveAuthGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthOauthNameGoogleDriveAuthGet<
  TData = Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: AuthOauthNameGoogleDriveAuthGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthOauthNameGoogleDriveAuthGet<
  TData = Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: AuthOauthNameGoogleDriveAuthGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Auth
 */

export function useAuthOauthNameGoogleDriveAuthGet<
  TData = Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: AuthOauthNameGoogleDriveAuthGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authOauthNameGoogleDriveAuthGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthOauthNameGoogleDriveAuthGetQueryOptions(
    name,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Callback
 */
export const callbackOauthNameGoogleDriveCallbackGet = (
  name: string,
  params: CallbackOauthNameGoogleDriveCallbackGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.get(`/oauth/${name}/google_drive/callback`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getCallbackOauthNameGoogleDriveCallbackGetQueryKey = (
  name: string,
  params: CallbackOauthNameGoogleDriveCallbackGetParams,
) => {
  return [
    `/oauth/${name}/google_drive/callback`,
    ...(params ? [params] : []),
  ] as const;
};

export const getCallbackOauthNameGoogleDriveCallbackGetQueryOptions = <
  TData = Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: CallbackOauthNameGoogleDriveCallbackGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCallbackOauthNameGoogleDriveCallbackGetQueryKey(name, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>
  > = ({ signal }) =>
    callbackOauthNameGoogleDriveCallbackGet(name, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CallbackOauthNameGoogleDriveCallbackGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>
>;
export type CallbackOauthNameGoogleDriveCallbackGetQueryError =
  AxiosError<HTTPValidationError>;

export function useCallbackOauthNameGoogleDriveCallbackGet<
  TData = Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: CallbackOauthNameGoogleDriveCallbackGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCallbackOauthNameGoogleDriveCallbackGet<
  TData = Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: CallbackOauthNameGoogleDriveCallbackGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useCallbackOauthNameGoogleDriveCallbackGet<
  TData = Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: CallbackOauthNameGoogleDriveCallbackGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Callback
 */

export function useCallbackOauthNameGoogleDriveCallbackGet<
  TData = Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: CallbackOauthNameGoogleDriveCallbackGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof callbackOauthNameGoogleDriveCallbackGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCallbackOauthNameGoogleDriveCallbackGetQueryOptions(
    name,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Token
 */
export const tokenOauthNameGoogleDriveTokenGet = (
  name: string,
  params: TokenOauthNameGoogleDriveTokenGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OAuthToken>> => {
  return axios.get(`/oauth/${name}/google_drive/token`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getTokenOauthNameGoogleDriveTokenGetQueryKey = (
  name: string,
  params: TokenOauthNameGoogleDriveTokenGetParams,
) => {
  return [
    `/oauth/${name}/google_drive/token`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTokenOauthNameGoogleDriveTokenGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: TokenOauthNameGoogleDriveTokenGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTokenOauthNameGoogleDriveTokenGetQueryKey(name, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>
  > = ({ signal }) =>
    tokenOauthNameGoogleDriveTokenGet(name, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TokenOauthNameGoogleDriveTokenGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>
>;
export type TokenOauthNameGoogleDriveTokenGetQueryError =
  AxiosError<HTTPValidationError>;

export function useTokenOauthNameGoogleDriveTokenGet<
  TData = Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: TokenOauthNameGoogleDriveTokenGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTokenOauthNameGoogleDriveTokenGet<
  TData = Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: TokenOauthNameGoogleDriveTokenGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTokenOauthNameGoogleDriveTokenGet<
  TData = Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: TokenOauthNameGoogleDriveTokenGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Token
 */

export function useTokenOauthNameGoogleDriveTokenGet<
  TData = Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: TokenOauthNameGoogleDriveTokenGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tokenOauthNameGoogleDriveTokenGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTokenOauthNameGoogleDriveTokenGetQueryOptions(
    name,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Index
 */
export const indexGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/`, options);
};

export const getIndexGetQueryKey = () => {
  return [`/`] as const;
};

export const getIndexGetQueryOptions = <
  TData = Awaited<ReturnType<typeof indexGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof indexGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIndexGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof indexGet>>> = ({
    signal,
  }) => indexGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof indexGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IndexGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof indexGet>>
>;
export type IndexGetQueryError = AxiosError<unknown>;

export function useIndexGet<
  TData = Awaited<ReturnType<typeof indexGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof indexGet>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof indexGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useIndexGet<
  TData = Awaited<ReturnType<typeof indexGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof indexGet>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof indexGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useIndexGet<
  TData = Awaited<ReturnType<typeof indexGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof indexGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Index
 */

export function useIndexGet<
  TData = Awaited<ReturnType<typeof indexGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof indexGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getIndexGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
